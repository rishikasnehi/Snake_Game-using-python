from collections import deque

class GameBoard:
    def _init_(self, size, has_boundary) -> None:
        self.size = size
        self.has_boundary = has_boundary
        self.blocks = None # set of all the blocked cells
        self.initBlocks()
    
    def _initBlocks(self):
        self.blocks = set()
        # TODO: fill blocks with boundary cells
        for i in range(self.size):
            self.blocks.add((0, i))
            self.blocks.add((i, 0))
            self.blocks.add((self.size-1, i))
            self.blocks.add((i, self.size-1))


class Snake:
    def _init_(self) -> None:
        self.body = deque()
        self.body_cells = set()
        self.initBody()
    
    def initBody(self, row=1, col=1, size=2):
        for i in range(size):
            self.body.append((row, col+i))



class SnakeGame:
    # gameboard = GameBoard()
    # snake = Snake()
    def _init_(self) -> None:
        self.snake = None
        self.board = None
        self.score = 0

    def moveSnake(self) -> None:
        for i in range(GameBoard.size):
            Snake.body.popleft()
            Snake.body.append(i)
        for i in range(GameBoard.size):
            if i == 0 or i == GameBoard.size - 1:
                Snake.body.append(i)
                Snake.body.popleft()
            else:
                Snake.body.append(i)
                Snake.body.popleft()
                
